---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import Sidebar from '../../components/Sidebar.astro';

import { questions, answers } from '../../data/questions.js';

export async function getStaticPaths() {
  return questions.map(question => ({
    params: { slug: question.slug },
    props: { question }
  }));
}

const { question } = Astro.props;
const allAnswers = answers.filter(answer => answer.questionId === question.id);
const childrenByParent = new Map<number, typeof allAnswers>();
for (const a of allAnswers) {
  const pid = (a as any).parentAnswerId as number | undefined;
  if (pid) {
    if (!childrenByParent.has(pid)) childrenByParent.set(pid, [] as any);
    (childrenByParent.get(pid) as any).push(a);
  }
}
const rootAnswers = allAnswers
  .filter(a => !("parentAnswerId" in (a as any)))
  .sort((a, b) => b.votes - a.votes);

function formatDate(dateString: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// SEO: Build QAPage JSON-LD from the question and top-level answers
const pageUrl = new URL(`/questions/${question.slug}/`, Astro.site);
const qaJsonLd: any = {
  "@context": "https://schema.org",
  "@type": "QAPage",
  "mainEntity": {
    "@type": "Question",
    "name": question.title,
    "text": question.content,
    "dateCreated": question.createdAt,
    "answerCount": rootAnswers.length,
    "author": { "@type": "Person", "name": (question as any)?.author?.name ?? "Anonymous", "url": `${pageUrl.toString()}#question-author` },
    "upvoteCount": question.votes,
    "url": pageUrl.toString(),
    "suggestedAnswer": rootAnswers.map((a) => ({
      "@type": "Answer",
      "url": `${pageUrl.toString()}#answer-${a.id}`,
      "text": a.content,
      "dateCreated": a.createdAt,
      "upvoteCount": a.votes,
      "author": { "@type": "Person", "name": (a as any)?.author?.name ?? "Anonymous", "url": `${pageUrl.toString()}#answer-${a.id}-author` }
    }))
  }
};
const jsonLd = JSON.stringify(qaJsonLd);
const encodedUrl = encodeURIComponent(pageUrl.toString());
const encodedText = encodeURIComponent(question.title);
---

<BaseLayout 
  title={`${question.title} - Quistra`}
  description={question.content.substring(0, 160)}
  canonical={`/questions/${question.slug}/`}
>
  <Fragment slot="head">
    <!-- Targeted SEO tags for Heardirectclub keywords (only for Nova hearing aid page) -->
    <meta name="robots" content="index, follow" />
    {question.slug === 'heardirectclubs-nova-hearing-aid-any-good' && (
      <meta name="keywords" content="heardirectclub, heardirectclub reviews, nova hearing aid, nova hearing aid review, heardirectclubs nova hearing aid" />
    )}
    <!-- Override OG type to article for question pages -->
    <meta property="og:type" content="article" />
    <meta property="article:published_time" content={question.createdAt} />
    <script type="application/ld+json" set:html={jsonLd} />
  </Fragment>
  <Header />
  
  <!-- Breadcrumb -->
  <nav class="bg-gray-50 border-b border-gray-200 py-3">
    <div class="container mx-auto px-4">
      <div class="flex items-center space-x-2 text-sm text-gray-600">
        <a href="/" class="hover:text-coral-600 transition-colors">Home</a>
        <span>/</span>
        <span class="text-gray-900">{question.title}</span>
      </div>
    </div>
  </nav>

  <main class="container mx-auto px-4 py-8" data-slug={question.slug}>
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Question Content -->
      <div class="flex-1">
        <!-- Question Header -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
          <div class="flex items-start gap-4">
            <!-- Vote Column -->
            <div class="flex flex-col items-center space-y-2 min-w-[60px]">
              <button class="vote-button upvote-btn" data-type="question" data-id={question.id}>
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                </svg>
              </button>
              <span class="text-lg font-semibold text-gray-700 vote-count" data-original={question.votes}>{question.votes}</span>
              <button class="vote-button downvote-btn" data-type="question" data-id={question.id}>
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
              
              <!-- Bookmark -->
              <button class="vote-button mt-4">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
                </svg>
              </button>
            </div>
            
            <!-- Question Content -->
            <div class="flex-1">
              <h1 class="text-2xl font-bold text-gray-900 mb-4">{question.title}</h1>
              
              <div class="prose max-w-none mb-6">
                <p class="text-gray-700 leading-relaxed">{question.content}</p>
              </div>
              
              <!-- Tags -->
              <div class="flex flex-wrap gap-2 mb-6">
                {question.tags.map(tag => (
                  <a href={`/tags/${tag}`} class="tag hover:bg-gray-200 transition-colors">
                    {tag}
                  </a>
                ))}
              </div>
              <!-- Share Toolbar -->
              <div class="mb-6">
                <div class="flex flex-wrap items-center gap-3">
                  <span class="text-sm text-gray-500">Share</span>

                  <!-- Native Share (prominent) -->
                  <button id="web-share-btn" class="inline-flex items-center gap-2 rounded-full bg-gradient-to-r from-primary-600 to-coral-500 hover:from-primary-700 hover:to-coral-600 text-white pl-3 pr-3 py-2 shadow-sm transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                      <path d="M4 12v7a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-7" />
                      <path d="M16 6l-4-4-4 4" />
                      <path d="M12 2v14" />
                    </svg>
                    <span class="hidden sm:inline">Share</span>
                  </button>

                  <!-- X (Twitter) -->
                  <a
                    href={`https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedText}`}
                    target="_blank" rel="noopener"
                    class="group inline-flex items-center justify-center h-9 w-9 rounded-full bg-white text-gray-700 ring-1 ring-inset ring-gray-200 hover:ring-black/30 hover:bg-gray-50 transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300"
                    aria-label="Share on X" title="Share on X"
                  >
                    <svg class="w-4 h-4 text-black" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                      <path d="M18.146 2H21l-6.56 7.49L22.5 22h-6.82l-4.77-6.23L5.31 22H2.46l7.03-8.03L1.5 2h6.91l4.3 5.73L18.15 2zM17.26 20h1.89L8.1 4H6.15l11.1 16z" />
                    </svg>
                    <span class="sr-only">Share on X</span>
                  </a>

                  <!-- Facebook -->
                  <a
                    href={`https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`}
                    target="_blank" rel="noopener"
                    class="group inline-flex items-center justify-center h-9 w-9 rounded-full bg-white text-gray-700 ring-1 ring-inset ring-gray-200 hover:bg-[#1877F2]/10 hover:ring-[#1877F2]/30 transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-[#1877F2]/40"
                    aria-label="Share on Facebook" title="Share on Facebook"
                  >
                    <svg class="w-4 h-4 text-[#1877F2]" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                      <path d="M22 12.06C22 6.5 17.52 2 12 2S2 6.5 2 12.06C2 17.08 5.66 21.2 10.44 22v-7.03H7.9v-2.9h2.54v-2.2c0-2.5 1.49-3.88 3.78-3.88 1.1 0 2.25.2 2.25.2v2.47h-1.27c-1.25 0-1.64.78-1.64 1.58v1.83h2.79l-.45 2.9h-2.34V22C18.34 21.2 22 17.08 22 12.06z" />
                    </svg>
                    <span class="sr-only">Share on Facebook</span>
                  </a>

                  <!-- LinkedIn -->
                  <a
                    href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodedUrl}`}
                    target="_blank" rel="noopener"
                    class="group inline-flex items-center justify-center h-9 w-9 rounded-full bg-white text-gray-700 ring-1 ring-inset ring-gray-200 hover:bg-[#0A66C2]/10 hover:ring-[#0A66C2]/30 transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-[#0A66C2]/40"
                    aria-label="Share on LinkedIn" title="Share on LinkedIn"
                  >
                    <svg class="w-4 h-4 text-[#0A66C2]" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                      <path d="M20.45 20.45h-3.55v-5.6c0-1.34-.02-3.05-1.86-3.05-1.86 0-2.15 1.45-2.15 2.95v5.7H9.34V9h3.4v1.56h.05c.47-.89 1.62-1.83 3.34-1.83 3.57 0 4.23 2.35 4.23 5.4v6.32zM5.34 7.43a2.06 2.06 0 110-4.12 2.06 2.06 0 010 4.12zM7.13 20.45H3.56V9h3.57v11.45z" />
                    </svg>
                    <span class="sr-only">Share on LinkedIn</span>
                  </a>

                  <!-- Copy Link -->
                  <button id="copy-link-btn" class="inline-flex items-center justify-center h-9 w-9 rounded-full bg-white text-gray-700 ring-1 ring-inset ring-gray-200 hover:bg-gray-50 transition transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-300" title="Copy link">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                      <path d="M10 13a5 5 0 0 1 7 0l1 1a5 5 0 0 1 0 7 5 5 0 0 1-7 0l-1-1" />
                      <path d="M14 11a5 5 0 0 1-7 0l-1-1a5 5 0 0 1 0-7 5 5 0 0 1 7 0l1 1" />
                    </svg>
                    <span class="sr-only">Copy link</span>
                  </button>
                  <span id="copy-link-confirm" class="ml-1 text-xs text-emerald-600 hidden">Copied!</span>
                </div>
              </div>

              <!-- Question Meta -->
              <div class="flex items-center justify-end pt-4 border-t border-gray-200">
                <div class="flex items-center space-x-3">
                  <div>
                    <div id="question-author" class="text-sm font-medium text-gray-900">{question.author.name}</div>
                  </div>
                  <div class="text-right">
                    <div class="text-xs text-gray-700 ts-el" data-ts="question" data-id={question.id}>{formatDate(question.createdAt)}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Answers Section -->
        <div class="mb-6">
          <h2 class="text-xl font-semibold text-gray-900 mb-4">
            {allAnswers.length} Answer{allAnswers.length !== 1 ? 's' : ''}
          </h2>
          
          {allAnswers.length === 0 ? (
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
              <p class="text-gray-500">No answers yet. Be the first to answer this question!</p>
            </div>
          ) : (
            <div>
              <div id="answers-container" class="space-y-6">
                {rootAnswers.slice(0, 5).map((answer, idx) => (
                <article id={`answer-${answer.id}`} class={`bg-white rounded-lg shadow-sm border p-6 ${idx === 0 ? 'relative border-emerald-500 ring-1 ring-emerald-300' : 'border-gray-200'}`}>
                  {idx === 0 && (
                    <div class="absolute -top-3 left-4">
                      <span class="inline-flex items-center gap-1 px-2 py-1 text-xs font-semibold rounded-full bg-emerald-100 text-emerald-700 border border-emerald-300">
                        <svg class="w-3.5 h-3.5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                          <path d="M9.049.927a1 1 0 011.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.802 2.036a1 1 0 00-.364 1.118l1.07 3.292c.3.922-.755 1.688-1.54 1.118l-2.802-2.036a1 1 0 00-1.176 0L6.715 14.28c-.785.57-1.84-.196-1.54-1.118l1.07-3.292a1 1 0 00-.364-1.118L3.079 6.72c-.783-.57-.38-1.81.588-1.81h3.462a1 1 0 00.95-.69L9.049.927z"/>
                        </svg>
                        Top Answer
                      </span>
                    </div>
                  )}
                  <div class="flex gap-4">
                    <!-- Vote Column -->
                    <div class="flex flex-col items-center space-y-2 min-w-[60px]">
                      <button class="vote-button upvote-btn" data-type="answer" data-id={answer.id}>
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                        </svg>
                      </button>
                      <span class="text-lg font-semibold text-gray-700 vote-count" data-original={answer.votes}>{answer.votes}</span>
                      <button class="vote-button downvote-btn" data-type="answer" data-id={answer.id}>
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                      </button>
                      
                      {answer.isAccepted && (
                        <div class="mt-4">
                          <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                            </svg>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <!-- Answer Content -->
                    <div class="flex-1">
                      <div class="prose max-w-none mb-4">
                        <p class="text-gray-700 leading-relaxed whitespace-pre-wrap">{answer.content}</p>
                      </div>
                      
                      <!-- Answer Meta -->
                      <div class="flex items-center justify-end pt-4 border-t border-gray-200">
                        
                        <div class="flex items-center space-x-3">

                          <div>
                            <div id={`answer-${answer.id}-author`} class="text-sm font-medium text-gray-900">{answer.author.name}</div>
                          </div>
                          <div class="text-right">
                            <div class="text-xs text-gray-700 ts-el" data-ts="answer" data-id={answer.id}>{formatDate(answer.createdAt)}</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  {childrenByParent.get(answer.id)?.length ? (
                    <div class="mt-4 space-y-4 ml-10">
                      {childrenByParent.get(answer.id)!.map(child => (
                        <article id={`answer-${child.id}`} class="bg-gray-50 rounded-lg border border-gray-200 p-4">
                          <div class="flex gap-4">
                            <!-- Vote Column -->
                            <div class="flex flex-col items-center space-y-2 min-w-[60px]">
                              <button class="vote-button upvote-btn" data-type="answer" data-id={child.id}>
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                                </svg>
                              </button>
                              <span class="text-lg font-semibold text-gray-700 vote-count" data-original={child.votes}>{child.votes}</span>
                              <button class="vote-button downvote-btn" data-type="answer" data-id={child.id}>
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                              </button>
                            </div>
                            <!-- Answer Content -->
                            <div class="flex-1">
                              <div class="prose max-w-none mb-4">
                                <p class="text-gray-700 leading-relaxed whitespace-pre-wrap">{child.content}</p>
                              </div>
                              <div class="flex items-center justify-end pt-4 border-t border-gray-200">
                                <div class="flex items-center space-x-3">

                                  <div>
                                    <div id={`answer-${child.id}-author`} class="text-sm font-medium text-gray-900">{child.author.name}</div>
                                  </div>
                                  <div class="text-right">
                                    <div class="text-xs text-gray-500">replied</div>
                                    <div class="text-xs text-gray-700 ts-el" data-ts="answer" data-id={child.id}>{formatDate(child.createdAt)}</div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </article>
                      ))}
                    </div>
                  ) : null}
                </article>
                ))}
              </div>
               
              <!-- Hidden answers for pagination -->
              <div id="hidden-answers" class="hidden space-y-6">
                {rootAnswers.slice(5).map(answer => (
                <article id={`answer-${answer.id}`} class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                  <div class="flex gap-4">
                    <!-- Vote Column -->
                    <div class="flex flex-col items-center space-y-2 min-w-[60px]">
                      <button class="vote-button upvote-btn" data-type="answer" data-id={answer.id}>
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                        </svg>
                      </button>
                      <span class="text-lg font-semibold text-gray-700 vote-count" data-original={answer.votes}>{answer.votes}</span>
                      <button class="vote-button downvote-btn" data-type="answer" data-id={answer.id}>
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                      </button>
                      
                      {answer.isAccepted && (
                        <div class="mt-2">
                          <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                            <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                            </svg>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <!-- Answer Content -->
                    <div class="flex-1">
                      <div class="prose max-w-none mb-4">
                        <p class="text-gray-700 leading-relaxed whitespace-pre-wrap">{answer.content}</p>
                      </div>
                      
                      <!-- Answer Meta -->
                      <div class="flex items-center justify-end pt-4 border-t border-gray-200">
                        <div class="flex items-center space-x-3">

                          <div>
                            <div id={`answer-${answer.id}-author`} class="text-sm font-medium text-gray-900">{answer.author.name}</div>
                            {answer.author.reputation > 0 && (
                              <div class="text-xs text-gray-500">{answer.author.reputation.toLocaleString()} reputation</div>
                            )}
                          </div>
                          <div class="text-right">
                            <div class="text-xs text-gray-700 ts-el" data-ts="answer" data-id={answer.id}>{formatDate(answer.createdAt)}</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Child answers (replies) */}
                  {childrenByParent.has(answer.id) ? (
                    <div class="ml-16 mt-6 space-y-4">
                      {childrenByParent.get(answer.id)?.map(child => (
                        <article class="bg-gray-50 rounded-lg border border-gray-200 p-4">
                          <div class="flex gap-4">
                            <div class="flex flex-col items-center space-y-2 min-w-[50px]">
                              <button class="vote-button text-sm">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                                </svg>
                              </button>
                              <span class="text-lg font-semibold text-gray-700">{child.votes}</span>
                              <button class="vote-button text-sm">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                              </button>
                            </div>
                            <div class="flex-1">
                              <div class="prose max-w-none mb-4">
                                <p class="text-gray-700 leading-relaxed whitespace-pre-wrap">{child.content}</p>
                              </div>
                              <div class="flex items-center justify-end pt-4 border-t border-gray-200">
                                <div class="flex items-center space-x-3">

                                  <div>
                                    <div class="text-sm font-medium text-gray-900">{child.author.name}</div>
                                  </div>
                                  <div class="text-right">
                                    <div class="text-xs text-gray-500">replied</div>
                                    <div class="text-xs text-gray-700 ts-el" data-ts="answer" data-id={child.id}>{formatDate(child.createdAt)}</div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </article>
                      ))}
                    </div>
                  ) : null}
                </article>
                ))}
              </div>
              
              <!-- Load More Button -->
              {rootAnswers.length > 5 && (
                <div class="text-center mt-6">
                  <button 
                    id="load-more-btn" 
                    class="bg-coral-600 hover:bg-coral-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200 shadow-sm hover:shadow-md"
                  >
                    Load More Answers
                  </button>
                </div>
              )}
            </div>
          )}
        </div>

        <!-- Answer Form -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Leave a Reply</h3>
          <form class="space-y-4">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
              <input 
                type="text" 
                id="name"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-coral-500 focus:border-transparent"
                required
              >
            </div>
            <div>
              <label for="website" class="block text-sm font-medium text-gray-700 mb-1">Website</label>
              <input 
                type="url" 
                id="website"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-coral-500 focus:border-transparent"
              >
            </div>
            <div>
              <label for="comment" class="block text-sm font-medium text-gray-700 mb-1">Comment *</label>
              <textarea 
                id="comment"
                rows="6"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-coral-500 focus:border-transparent"
                required
              ></textarea>
            </div>
            <button type="submit" class="btn-primary">
              Post your answer
            </button>
          </form>
        </div>
      </div>

      <!-- Sidebar -->
      <Sidebar />
    </div>
  </main>

  <Footer />
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Voting functionality
    initializeVoting();
    
    // Dynamic timestamp generation for a specific slug (Nova hearing aid page)
    try {
      const mainEl = document.querySelector('main[data-slug]');
      const pageSlug = mainEl?.getAttribute('data-slug') || '';
      if (pageSlug === 'heardirectclubs-nova-hearing-aid-any-good') {
        initializeRandomTimestamps(pageSlug);
      }
    } catch (e) {
      // noop
    }
    
    const loadMoreBtn = document.getElementById('load-more-btn');
    const hiddenAnswers = document.getElementById('hidden-answers');
    const answersContainer = document.getElementById('answers-container');
    
    if (loadMoreBtn && hiddenAnswers) {
      let currentPage = 1;
      const answersPerPage = 5;
      const hiddenAnswerElements = Array.from(hiddenAnswers.children);
      const totalHiddenAnswers = hiddenAnswerElements.length;
      
      loadMoreBtn.addEventListener('click', function() {
        // Calculate how many answers to show next
        const startIndex = (currentPage - 1) * answersPerPage;
        const endIndex = Math.min(startIndex + answersPerPage, totalHiddenAnswers);
        
        // Move answers from hidden container to visible container
        for (let i = startIndex; i < endIndex; i++) {
          if (hiddenAnswerElements[i]) {
            answersContainer.appendChild(hiddenAnswerElements[i]);
          }
        }
        
        currentPage++;
        
        // Update button text or hide it if no more answers
        const remainingAnswers = totalHiddenAnswers - (endIndex);
        if (remainingAnswers > 0) {
          loadMoreBtn.textContent = 'Load More Answers';
        } else {
          loadMoreBtn.style.display = 'none';
        }
        
        // Smooth scroll to the newly loaded content
        const newlyAddedAnswer = hiddenAnswerElements[startIndex];
        if (newlyAddedAnswer) {
          setTimeout(() => {
            newlyAddedAnswer.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'start',
              inline: 'nearest'
            });
          }, 100);
        }
      });
    }
    
    // Share: Web Share API with fallback + Copy Link
    const shareBtn = document.getElementById('web-share-btn');
    const copyBtn = document.getElementById('copy-link-btn');
    
    if (shareBtn) {
      shareBtn.addEventListener('click', async () => {
        const data = {
          title: document.title,
          text: document.title,
          url: window.location.href
        };
        if (navigator.share) {
          try {
            await navigator.share(data);
          } catch (err) {
            // If user cancels or share fails, do nothing
          }
        } else {
          // Fallback: open X share intent
          const url = encodeURIComponent(window.location.href);
          const text = encodeURIComponent(document.title);
          window.open(`https://twitter.com/intent/tweet?url=${url}&text=${text}`, '_blank', 'noopener');
        }
      });
    }
    
    if (copyBtn) {
      copyBtn.addEventListener('click', async () => {
        const pageUrl = window.location.href;
        let copied = false;
        try {
          await navigator.clipboard.writeText(pageUrl);
          copied = true;
        } catch (e) {
          // Fallback for older browsers
          const ta = document.createElement('textarea');
          ta.value = pageUrl;
          ta.style.position = 'fixed';
          ta.style.opacity = '0';
          document.body.appendChild(ta);
          ta.select();
          try { document.execCommand('copy'); copied = true; } catch (_) {}
          document.body.removeChild(ta);
        }
        if (copied) {
          const confirmEl = document.getElementById('copy-link-confirm');
          if (confirmEl) {
            confirmEl.classList.remove('hidden');
            setTimeout(() => { confirmEl.classList.add('hidden'); }, 1400);
          }
        }
      });
    }
    
    // Initialize voting functionality
    function initializeVoting() {
      // Get all vote buttons
      const upvoteButtons = document.querySelectorAll('.upvote-btn');
      const downvoteButtons = document.querySelectorAll('.downvote-btn');
      
      // Load existing votes from localStorage
      const votes = JSON.parse(localStorage.getItem('quistra_votes') || '{}');
      
      // Apply existing vote states
      applyVoteStates(votes);
      
      // Add click handlers for upvote buttons
      upvoteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const type = this.dataset.type;
          const id = this.dataset.id;
          const key = `${type}_${id}`;
          
          // Toggle upvote
          if (votes[key] === 'up') {
            delete votes[key];
          } else {
            votes[key] = 'up';
          }
          
          // Save to localStorage
          localStorage.setItem('quistra_votes', JSON.stringify(votes));
          
          // Update UI
          applyVoteStates(votes);
        });
      });
      
      // Add click handlers for downvote buttons
      downvoteButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const type = this.dataset.type;
          const id = this.dataset.id;
          const key = `${type}_${id}`;
          
          // Toggle downvote
          if (votes[key] === 'down') {
            delete votes[key];
          } else {
            votes[key] = 'down';
          }
          
          // Save to localStorage
          localStorage.setItem('quistra_votes', JSON.stringify(votes));
          
          // Update UI
          applyVoteStates(votes);
        });
      });
    }
    
    function applyVoteStates(votes) {
      // Reset all buttons first
      document.querySelectorAll('.upvote-btn, .downvote-btn').forEach(btn => {
        btn.classList.remove('voted-up', 'voted-down');
      });
      
      // Apply vote states and update counts
      Object.keys(votes).forEach(key => {
        const [type, id] = key.split('_');
        const voteType = votes[key];
        
        const upBtn = document.querySelector<HTMLElement>(`.upvote-btn[data-type="${type}"][data-id="${id}"]`);
        const downBtn = document.querySelector<HTMLElement>(`.downvote-btn[data-type="${type}"][data-id="${id}"]`);
        const countSpan = document.querySelector<HTMLElement>(`.vote-count[data-original][data-type="${type}"][data-id="${id}"]`) ||
                         upBtn?.parentElement?.querySelector<HTMLElement>('.vote-count[data-original]');
        
        if (countSpan) {
          const originalCount = parseInt((countSpan as HTMLElement).dataset.original || '0', 10);
          let newCount = originalCount;
          
          if (voteType === 'up') {
            newCount = originalCount + 1;
            upBtn?.classList.add('voted-up');
          } else if (voteType === 'down') {
            newCount = originalCount - 1;
            downBtn?.classList.add('voted-down');
          }
          
          (countSpan as HTMLElement).textContent = String(newCount);
        }
      });
    }
    
    // Timestamp utilities and initializer
    function initializeRandomTimestamps(slug) {
      const storageKey = `quistra_ts_${slug}`;
      const now = new Date();
      const sixMonthsAgo = new Date(now);
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
      
      // Load existing cache
      const cache = safeParse(localStorage.getItem(storageKey)) || { question: null, answers: {} };
      
      // Collect DOM nodes
      const questionNode = document.querySelector('.ts-el[data-ts="question"]');
      const answerNodes = Array.from(document.querySelectorAll('.ts-el[data-ts="answer"][data-id]'));
      
      // Generate question timestamp if missing
      if (!cache.question) {
        cache.question = randomDateBetween(sixMonthsAgo, now).toISOString();
      }
      const questionDate = new Date(cache.question);
      
      // Ensure answers exist after question
      answerNodes.forEach((node) => {
        const id = node.getAttribute('data-id');
        if (!id) return;
        if (!cache.answers[id]) {
          cache.answers[id] = randomDateBetween(questionDate, now).toISOString();
        }
      });
      
      // Persist
      localStorage.setItem(storageKey, JSON.stringify(cache));
      
      // Apply to DOM with consistent formatting
      if (questionNode && cache.question) {
        questionNode.textContent = formatDateClient(cache.question);
      }
      answerNodes.forEach((node) => {
        const id = node.getAttribute('data-id');
        const ts = id ? cache.answers[id] : null;
        if (ts) node.textContent = formatDateClient(ts);
      });
    }
    
    function randomDateBetween(start, end) {
      const startMs = start.getTime();
      const endMs = end.getTime();
      const t = startMs + Math.random() * Math.max(0, endMs - startMs);
      return new Date(t);
    }
    
    function formatDateClient(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
    
    function safeParse(str) {
      try { return str ? JSON.parse(str) : null; } catch { return null; }
    }
  });
</script>
